<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="info" monitorInterval="30">
    <Properties>
        <Property name="LOG_FORMAT">%d{yyyy-MM-dd HH:mm:ss} %p %m%n</Property>
        <!-- <Property name="BASE_DIR">F:/chatbotManager/chatbotManager_logs</Property> -->
        <!-- <Property name="BASE_DIR">E:/spring_boot/workspace_policeBot/chatbotManager/chatbotManager_logs</Property> -->
        <Property name="BASE_DIR">/data/AI/chatbot/logs/chatbotManager_logs</Property>
    </Properties>

    <Appenders>
        <Console name="Console" target="SYSTEM_OUT" follow="true">
            <PatternLayout pattern="${LOG_FORMAT}"/>
        </Console>
        <RollingFile name="File"
                     fileName="${BASE_DIR}/bootdemo.log"
                     filePattern="${BASE_DIR}/bootdemo.%d{yyyyMMdd}.log">
            <PatternLayout pattern="${LOG_FORMAT}"/>
            <Policies>
                <TimeBasedTriggeringPolicy />
            </Policies>
            <DefaultRolloverStrategy>
                <Delete basePath="${BASE_DIR}">
                    <IfFileName glob="*.log" />
                    <IfLastModified age="30d" />
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>
    </Appenders>

    <Loggers>
        <Root level="info">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="File" />
        </Root>
         
         <!-- log4jdbc 옵션 설정 --> 
        <logger name="jdbc" level="OFF"/> 
        <!-- 커넥션 open close 이벤트를 로그로 남긴다. --> 
        <logger name="jdbc.connection" level="OFF"/> 
        <!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. --> 
        <logger name="jdbc.sqlonly" level="OFF"/> 
        <!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. --> 
        <logger name="jdbc.sqltiming" level="DEBUG"/>
         <!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. --> 
         <logger name="jdbc.audit" level="OFF"/> 
         <!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. --> 
         <logger name="jdbc.resultset" level="OFF"/> 
         <!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. --> 
         <logger name="jdbc.resultsettable" level="OFF"/>  



    </Loggers>
</Configuration>